networks:
  42nice:
    driver: bridge
  monitoring_network:
    driver: bridge
  db_network:
    driver: bridge
  
volumes:
  static_admin:
  postgres_data:

services:
## DEBUG UTILS ## DEBUG UTILS ## DEBUG UTILS ## DEBUG UTILS ## DEBUG UTILS ##
  # adminer:
  #   image: adminer:latest
  #   container_name: "adminer"
  #   networks:
  #     - db_network
  #   ports:
  #     - "4444:8080"
## INTERFACE ## INTERFACE ## INTERFACE ## INTERFACE ## INTERFACE ## INTERFACE ##
  nginx:
    build: requirements/nginx
    container_name: "nginx"
    restart: unless-stopped
    volumes:
      - static_admin:/static
    networks:
      - 42nice
      - monitoring_network
    ports:
      - "8080:443"
    depends_on:
      django:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:443"]
      interval: 5s
      timeout: 5s
      retries: 5
  ## BACKEND ## BACKEND ## BACKEND ## BACKEND ## BACKEND ## BACKEND ##
  django:
    build: requirements/django
    container_name: "django"
    restart: unless-stopped
    volumes:
      - static_admin:/app/.env/lib/python3.11/site-packages/django/contrib/admin/static
    # ports:
    #   - "8000:8000"
    depends_on:
      postgresql:
        condition: service_healthy
      chat:
        condition: service_healthy
      game_server:
        condition: service_healthy
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - 42nice
      - db_network
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:443"]
      interval: 5s
      timeout: 5s
      retries: 5
  postgresql:
    build: requirements/postgresql
    restart: unless-stopped
    container_name: "postgresql"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - db_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  ## APIs ## APIs ## APIs ## APIs ## APIs ## APIs ## APIs ## APIs ## APIs ##
  chat:
    build: requirements/chat
    container_name: "chat"
    restart: unless-stopped
    # ports:
    #   - "3000:3000"
    networks:
      - 42nice
    depends_on:
      postgresql:
       condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -k http://localhost:3000"]
      interval: 5s
      timeout: 5s
      retries: 5
  game_server:
    build: requirements/game_server
    container_name: "game_server"
    restart: unless-stopped
    # ports:
    #   - "4000:4000"
    networks:
      - 42nice
    depends_on:
      postgresql:
       condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -k http://localhost:4000"]
      interval: 5s
      timeout: 5s
      retries: 5
  ## MONITORING ## MONITORING ## MONITORING ## MONITORING ## MONITORING ##
  # grafana:
  #   build: requirements/grafana
  #   container_name: "monitoring_grafana"
  #   restart: unless-stopped
  #   user: "1000"
  #   networks:
  #     - 42nice
  #     - monitoring_network
  #   # ports:
  #   #   - "3000:3000"
  #   # depends_on:
  #   #   - prometheus
  #   environment:
  #     - GRAFANA_USER_NAME=${GRAFANA_USER_NAME}
  #     - GRAFANA_USER_PASSWORD=${GRAFANA_USER_PASSWORD}
  # prometheus:
  #   build: requirements/prometheus
  #   container_name: "monitoring_prometheus"
  #   restart: unless-stopped
  #   networks:
  #     - monitoring_network
  #   # ports:
  #   #   - "9090:9090"
  #   depends_on:
  #     - alertmanager
  #     - cadvisor
  #     - node-exporter
  # alertmanager:
  #   build: requirements/alertmanager
  #   container_name: "monitoring_alertmanager"
  #   restart: unless-stopped
  #   networks:
  #     - monitoring_network
  #   # ports:
  #   # - "9093:9093"
  #   environment:
  #     - DISCORD_WEBHOOK_URL="${DISCORD_WEBHOOK_URL}"
  # node-exporter:
  #   build: requirements/node-exporter
  #   container_name: "monitoring_node-exporter"
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #     - /:/host:ro,rslave
  #   networks:
  #     - monitoring_network
  # cadvisor:
  #   build: requirements/cadvisor
  #   container_name: "monitoring_cadvisor"
  #   restart: unless-stopped
  #   privileged: true
  #   command:
  #     - '-housekeeping_interval=15s'
  #     - '-docker_only=true'
  #     - '-store_container_labels=false'
  #   devices:
  #     - /dev/kmsg
  #   networks:
  #     - monitoring_network
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #     - /etc/machine-id:/etc/machine-id:ro